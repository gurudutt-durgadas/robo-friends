{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","cardArray","robots","map","robot","key","SearchBox","searchString","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAiBeA,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE3B,OAEE,yBAAKC,UAAU,mDAEd,yBAAKC,IAAM,SAASC,IAAG,+BAA0BH,EAA1B,cACvB,6BACC,gCAAMF,GACN,+BAAKC,MCYKK,EAlBE,SAAC,GAAc,IACzBC,EADwB,EAAXC,OACMC,KAAI,SAAAC,GACzB,OACE,kBAAC,EAAD,CACAC,IAAKD,EAAMR,GACXA,GAAKQ,EAAMR,GACXF,KAAOU,EAAMV,KACbC,MAAQS,EAAMT,WAIpB,OACC,oCACEM,ICFWK,EAdG,SAAC,GAAiC,EAAhCC,aAAiC,IAAnBC,EAAkB,EAAlBA,aAEjC,OACE,yBAAKX,UAAU,OACd,2BACCA,UAAY,oCACZY,KAAK,SACLC,YAAc,gBACdC,SAAYH,MCAFI,EARA,SAACC,GACf,OACE,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAChEJ,EAAMK,WCkBIC,E,YApBd,WAAYN,GAAO,IAAD,8BACjB,4CAAMA,KACDO,MAAO,CACXC,UAAU,GAHM,E,+EAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACN,2DAEDG,KAAKX,MAAMK,a,GAhBQQ,aCkDbC,G,kBA3Cd,aAAe,IAAD,8BACb,+CAeDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAClB,aAAcsB,EAAMC,OAAOC,SAf1C,EAAKX,MAAQ,CACTlB,OAAQ,GACRK,aAAc,IAJL,E,iFASM,IAAD,OAClByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACvB,OAAOkC,S,+BAO3B,IAAD,OACDC,EAAeb,KAAKJ,MAAMlB,OAAOoC,QAAO,SAAAlC,GAC7C,OAAOA,EAAMV,KAAK6C,cAAcC,SAAS,EAAKpB,MAAMb,aAAagC,kBAElE,OAAgC,IAA7Bf,KAAKJ,MAAMlB,OAAOuC,OACb,wBAAI5C,UAAU,MAAd,aAIN,yBAAKA,UAAU,OACd,wBAAIA,UAAU,MAAd,eAEA,kBAAC,EAAD,CAAWW,aAAgBgB,KAAKI,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAUmC,W,GAnCTX,cCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.a666349c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\t\r\n\treturn (\r\n\r\n\t\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow shadow-5\">\r\n\t\t\t\t\r\n\t\t\t\t<img alt = 'robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2> {name}</h2>\r\n\t\t\t\t\t<p> {email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({ robots })=>{\r\n\tconst cardArray = robots.map(robot =>{\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={robot.id} \r\n\t\t\t\t\t\t\tid= {robot.id} \r\n\t\t\t\t\t\t\tname= {robot.name} \r\n\t\t\t\t\t\t\temail= {robot.email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\treturn(\r\n\t\t<>\r\n\t\t\t{cardArray}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchString, searchChange}) => {\r\n\r\n\treturn(\r\n\t\t\t<div className='pa2'>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName = 'pa3 ma2 b--green bg-lightest-blue' \r\n\t\t\t\t\ttype='search' \r\n\t\t\t\t\tplaceholder = 'search robots'\r\n\t\t\t\t\tonChange = {searchChange} \r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t\t<div style={{overflowY:'scroll', border:'1px solid black', height:'800px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state ={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tconponentDidCatch(error, info){\r\n\t\tthis.setState({ hasError: true});\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oops......That is not good.</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\t\t\t\trobots: [], \r\n\t\t\t\t\t\tsearchString: '' \r\n\t\t\t\t\t}\r\n\t}\r\n\r\n\t//Component Did mount method \r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users=>this.setState({robots:users}));\r\n\t}\r\n\r\n\t//Function to change the searchString value called from the input box\r\n\tonSearchChange = (event)=>{\r\n\t\tthis.setState({searchString: event.target.value})\r\n\t}\r\n\trender(){\r\n\t\tconst filterRobots = this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchString.toLowerCase());\r\n\t\t})\r\n\t\tif(this.state.robots.length === 0 ){\r\n\t\t\treturn <h1 className=\"tc\"> Loading </h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"tc \">\r\n\t\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t\t{/*SearchBox component gets the onSearchChange function as a prop along with the searchString prop*/}\r\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots = {filterRobots} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\t\r\n\t}\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}